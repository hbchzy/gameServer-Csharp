// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gsdirectory.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Stream {

  /// <summary>Holder for reflection information generated from gsdirectory.proto</summary>
  public static partial class GsdirectoryReflection {

    #region Descriptor
    /// <summary>File descriptor for gsdirectory.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GsdirectoryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFnc2RpcmVjdG9yeS5wcm90bxIGc3RyZWFtIlcKB0dTTG9naW4SDgoGZ2Ft",
            "ZUlEGAEgASgNEg8KB3N2Y05hbWUYAiABKAkSDwoHcG9kTmFtZRgDIAEoCRIM",
            "CgRob3N0GAQgASgJEgwKBHBvcnQYBSABKA0iHAoKR1NMb2dpbkFjaxIOCgZz",
            "dGF0dXMYASABKA0iGwoLR1NIZWFydGJlYXQSDAoEbG9hZBgBIAEoDSIgCg5H",
            "U0hlYXJ0YmVhdEFjaxIOCgZzdGF0dXMYASABKA0iPAoIR1NMb2dvdXQSDgoG",
            "Z2FtZUlEGAEgASgNEg8KB3N2Y05hbWUYAiABKAkSDwoHcG9kTmFtZRgDIAEo",
            "CSIdCgtHU0xvZ291dEFjaxIOCgZzdGF0dXMYASABKA0qXAoQR1NEaXJlY3Rv",
            "cnlDbWRJRBIQCgxJblZhbGlkR1NDbWQQABIPCgpHU0xvZ2luQ21kELkXEhMK",
            "DkdTSGVhcnRiZWF0Q21kELsXEhAKC0dTTG9nb3V0Q21kEL0XYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Stream.GSDirectoryCmdID), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Stream.GSLogin), global::Stream.GSLogin.Parser, new[]{ "GameID", "SvcName", "PodName", "Host", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stream.GSLoginAck), global::Stream.GSLoginAck.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stream.GSHeartbeat), global::Stream.GSHeartbeat.Parser, new[]{ "Load" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stream.GSHeartbeatAck), global::Stream.GSHeartbeatAck.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stream.GSLogout), global::Stream.GSLogout.Parser, new[]{ "GameID", "SvcName", "PodName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stream.GSLogoutAck), global::Stream.GSLogoutAck.Parser, new[]{ "Status" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// GS -> Directory 命令号
  /// </summary>
  public enum GSDirectoryCmdID {
    [pbr::OriginalName("InValidGSCmd")] InValidGscmd = 0,
    [pbr::OriginalName("GSLoginCmd")] GsloginCmd = 3001,
    [pbr::OriginalName("GSHeartbeatCmd")] GsheartbeatCmd = 3003,
    [pbr::OriginalName("GSLogoutCmd")] GslogoutCmd = 3005,
  }

  #endregion

  #region Messages
  /// <summary>
  ///
  ///GS主动向Directory注册:
  ///GSLogin(gameID, svcName, podName, host, port) -> (status)
  /// </summary>
  public sealed partial class GSLogin : pb::IMessage<GSLogin> {
    private static readonly pb::MessageParser<GSLogin> _parser = new pb::MessageParser<GSLogin>(() => new GSLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GSLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stream.GsdirectoryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GSLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GSLogin(GSLogin other) : this() {
      gameID_ = other.gameID_;
      svcName_ = other.svcName_;
      podName_ = other.podName_;
      host_ = other.host_;
      port_ = other.port_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GSLogin Clone() {
      return new GSLogin(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "svcName" field.</summary>
    public const int SvcNameFieldNumber = 2;
    private string svcName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SvcName {
      get { return svcName_; }
      set {
        svcName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "podName" field.</summary>
    public const int PodNameFieldNumber = 3;
    private string podName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PodName {
      get { return podName_; }
      set {
        podName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 4;
    private string host_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 5;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GSLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GSLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (SvcName != other.SvcName) return false;
      if (PodName != other.PodName) return false;
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (SvcName.Length != 0) hash ^= SvcName.GetHashCode();
      if (PodName.Length != 0) hash ^= PodName.GetHashCode();
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (SvcName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SvcName);
      }
      if (PodName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PodName);
      }
      if (Host.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Port);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (SvcName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SvcName);
      }
      if (PodName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PodName);
      }
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GSLogin other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.SvcName.Length != 0) {
        SvcName = other.SvcName;
      }
      if (other.PodName.Length != 0) {
        PodName = other.PodName;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 18: {
            SvcName = input.ReadString();
            break;
          }
          case 26: {
            PodName = input.ReadString();
            break;
          }
          case 34: {
            Host = input.ReadString();
            break;
          }
          case 40: {
            Port = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GSLoginAck : pb::IMessage<GSLoginAck> {
    private static readonly pb::MessageParser<GSLoginAck> _parser = new pb::MessageParser<GSLoginAck>(() => new GSLoginAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GSLoginAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stream.GsdirectoryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GSLoginAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GSLoginAck(GSLoginAck other) : this() {
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GSLoginAck Clone() {
      return new GSLoginAck(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GSLoginAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GSLoginAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GSLoginAck other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///GS主动向Directory心跳 load 是一个（0，100）值，用来衡量当前GS负载情况:
  ///GSHeartbeat(load) -> (status)
  /// </summary>
  public sealed partial class GSHeartbeat : pb::IMessage<GSHeartbeat> {
    private static readonly pb::MessageParser<GSHeartbeat> _parser = new pb::MessageParser<GSHeartbeat>(() => new GSHeartbeat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GSHeartbeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stream.GsdirectoryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GSHeartbeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GSHeartbeat(GSHeartbeat other) : this() {
      load_ = other.load_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GSHeartbeat Clone() {
      return new GSHeartbeat(this);
    }

    /// <summary>Field number for the "load" field.</summary>
    public const int LoadFieldNumber = 1;
    private uint load_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Load {
      get { return load_; }
      set {
        load_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GSHeartbeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GSHeartbeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Load != other.Load) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Load != 0) hash ^= Load.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Load != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Load);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Load != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Load);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GSHeartbeat other) {
      if (other == null) {
        return;
      }
      if (other.Load != 0) {
        Load = other.Load;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Load = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GSHeartbeatAck : pb::IMessage<GSHeartbeatAck> {
    private static readonly pb::MessageParser<GSHeartbeatAck> _parser = new pb::MessageParser<GSHeartbeatAck>(() => new GSHeartbeatAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GSHeartbeatAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stream.GsdirectoryReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GSHeartbeatAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GSHeartbeatAck(GSHeartbeatAck other) : this() {
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GSHeartbeatAck Clone() {
      return new GSHeartbeatAck(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GSHeartbeatAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GSHeartbeatAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GSHeartbeatAck other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///GS主动向Directory心跳:
  ///GSLogout(gameID, svcName, podName) -> (status)
  /// </summary>
  public sealed partial class GSLogout : pb::IMessage<GSLogout> {
    private static readonly pb::MessageParser<GSLogout> _parser = new pb::MessageParser<GSLogout>(() => new GSLogout());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GSLogout> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stream.GsdirectoryReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GSLogout() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GSLogout(GSLogout other) : this() {
      gameID_ = other.gameID_;
      svcName_ = other.svcName_;
      podName_ = other.podName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GSLogout Clone() {
      return new GSLogout(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "svcName" field.</summary>
    public const int SvcNameFieldNumber = 2;
    private string svcName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SvcName {
      get { return svcName_; }
      set {
        svcName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "podName" field.</summary>
    public const int PodNameFieldNumber = 3;
    private string podName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PodName {
      get { return podName_; }
      set {
        podName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GSLogout);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GSLogout other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (SvcName != other.SvcName) return false;
      if (PodName != other.PodName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (SvcName.Length != 0) hash ^= SvcName.GetHashCode();
      if (PodName.Length != 0) hash ^= PodName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (SvcName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SvcName);
      }
      if (PodName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PodName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (SvcName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SvcName);
      }
      if (PodName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PodName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GSLogout other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.SvcName.Length != 0) {
        SvcName = other.SvcName;
      }
      if (other.PodName.Length != 0) {
        PodName = other.PodName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 18: {
            SvcName = input.ReadString();
            break;
          }
          case 26: {
            PodName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GSLogoutAck : pb::IMessage<GSLogoutAck> {
    private static readonly pb::MessageParser<GSLogoutAck> _parser = new pb::MessageParser<GSLogoutAck>(() => new GSLogoutAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GSLogoutAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stream.GsdirectoryReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GSLogoutAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GSLogoutAck(GSLogoutAck other) : this() {
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GSLogoutAck Clone() {
      return new GSLogoutAck(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GSLogoutAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GSLogoutAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GSLogoutAck other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
