syntax = "proto3";

enum HotelGsCmdID{
	HotelNone = 0;
	//建立连接时
	HotelCreateConnect = 1501;
	HotelCreateConnectAck = 1502;
	// 二进制broadcast协议
    HotelBroadcastCMDID    = 1503;
    HotelBroadcastAckCMDID = 1504;
	// 二进制push协议
    HotelPushCMDID = 1505;
	//删除房间
	HotelCloseConnet = 1506;
	HotelCloseConnetAck = 1507;
    // 玩家checkin
    HotelPlayerCheckin = 1601;
    HotelPlayerCheckinAck = 1602;
    // 设置帧率
    GSSetFrameSyncRateCMDID    = 1603;
    GSSetFrameSyncRateAckCMDID = 1604;
    // 设置帧率通知
    GSSetFrameSyncRateNotifyCMDID = 1606;
    // 发送帧数据
    GSFrameBroadcastCMDID    = 1607;
    GSFrameBroadcastAckCMDID = 1608;
    // 帧数据通知
    GSFrameDataNotifyCMDID = 1610;
    // 帧同步通知
    GSFrameSyncNotifyCMDID = 1612;
}

//推送hotel消息类型
enum PushMsgType{
    NoneType = 0;
    //推送给列表中的指定用户
    UserTypeSpecific = 1;
    //推送给除列表中指定用户外的其他用户
    UserTypeExclude = 2;
    //推送给房间内的所有用户，包括自己，users列表参数无效
    UserTypeAll = 3;
}

//建立连接时//需要把roomID和Stream映射起来
message Connect {
	uint32 gameID = 1;
    uint64 roomID = 2;  
}

//建立连接后返回
message ConnectAck{
	uint32 status = 1;
}

//关闭连接，删除房间信息
message CloseConnect {
	uint32 gameID = 1;
    uint64 roomID = 2;  
}

//关闭连接返回
message  CloseConnectAck{
	uint32 status = 1;
}
//广播消息
message HotelBroadcast{
	uint32 userID = 1;
	uint32 gameID = 2;
    uint64 roomID = 3;
    uint32 flag = 4;   // 0000 00 00 priority, dstType 和 msgType 合并
    repeated uint32 dstUids = 5;
    bytes cpProto = 6;
}
//消息同步返回
message HotelBroadcastAck {
    uint32 userID = 1;
    uint32 status = 2;
}	

//推送给hotel消息
message PushToHotelMsg {
    PushMsgType pushType = 1;//根据push类型广播给其他人
    uint32 gameID = 2;
    uint64 roomID = 3;
    repeated uint32 dstUids = 4;
    bytes cpProto = 5;
}

//玩家checkin消息
message PlayerCheckin {
    uint32 userID = 1;
    uint32 gameID = 2;
    uint64 roomID = 3;
    uint32 maxPlayers = 4;         // 房间可容纳最大玩家数
    repeated uint32 checkins = 5;  // 已经checkIn的玩家ID
    repeated uint32 players = 6;   // 房间中所有book的玩家ID
}

//玩家checkin消息返回
message PlayerCheckinAck {
    uint32 status = 1;
}

message GSSetFrameSyncRate {
    uint32 gameID = 1;
    uint64 roomID = 2;      // 房间ID
    uint32 priority = 3;    // 要设置的通道的优先级
    uint32 frameRate = 4;   // 同步帧率(0-20,且能被1000整除)
    uint32 frameIdx = 5;    // 初始帧编号(frameRate > 0 时有效),frameIdx 需 > 0
    uint32 enableGS = 6;    // GameServer是否参与帧同步（0：不参与；1：参与）
}

message GSSetFrameSyncRateAck {
    uint32 status = 1;
}

message GSSetFrameSyncRateNotify {
    uint32 gameID = 1;
    uint64 roomID = 2;
    uint32 priority = 3;    // 要设置的通道的优先级
    uint32 frameRate = 4;   // 同步帧率
    uint32 frameIdx = 5;    // 初始帧编号
    uint64 timeStamp = 6;   // 系统时间戳
    uint32 enableGS = 7;    // GameServer是否参与帧同步（0：不参与；1：参与）
}

message GSFrameBroadcast {
    uint32 gameID = 1;
    uint64 roomID = 2;
    uint32 priority = 3;
    bytes cpProto = 4;
    int32 operation = 5;    // 0：只发客户端；1：只发GS；2：同时发送客户端和GS
}

message GSFrameBroadcastAck {
    uint32 status = 1;
}

message GSFrameDataNotify {
    uint32 gameID = 1;
    uint64 roomID = 2;
    uint32 src_uid = 3;
    uint32 priority = 4;
    bytes cpProto = 5;
    uint64 timeStamp = 6; // 帧数据时间戳
    uint32 frameIdx = 7;  // 帧编号-帧同步时有效(>0)
}

message GSFrameSyncNotify {
    uint32 gameID = 1;
    uint64 roomID = 2;
    uint32 priority = 3;    // 要设置的通道的优先级
    uint32 lastIdx = 4;     // 当前帧编号
    uint32 nextIdx = 5;     // 下一帧编号
    uint64 startTS = 6;     // 本帧开始时间戳
    uint64 endTS = 7;       // 本帧结束时间戳
    uint64 timeStamp = 8;   // 系统时间戳
}
