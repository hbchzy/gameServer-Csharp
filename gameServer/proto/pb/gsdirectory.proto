syntax = "proto3";

package stream;

// GS -> Directory 命令号
enum GSDirectoryCmdID {
    InValidGSCmd    = 0;
    GSLoginCmd = 3001;
    GSHeartbeatCmd = 3003;
    GSLogoutCmd = 3005;

    GSCreateRoomCmd = 4001;
    GSTouchRoomCmd = 4003;
    GSDestroyRoomCmd = 4005;
}

/*
GS主动向Directory注册:
GSLogin(gameID, svcName, podName, host, port) -> (status)
*/
message GSLogin {
    uint32 gameID = 1;
    string svcName = 2;
    string podName = 3;
    string host = 4;
    uint32 port = 5;
}

message GSLoginAck {
    uint32 status = 1;
}

/*
GS主动向Directory心跳 load 是一个（0，100）值，用来衡量当前GS负载情况:
GSHeartbeat(load) -> (status)
*/
message GSHeartbeat {
    uint32 load = 1;
}

message GSHeartbeatAck {
    uint32 status = 1;
}

/*
GS主动向Directory心跳:
GSLogout(gameID, svcName, podName) -> (status)
*/
message GSLogout {
    uint32 gameID = 1;
    string svcName = 2;
    string podName = 3;
}

message GSLogoutAck {
    uint32 status = 1;
}

// 房间创建途径
enum CreateFlag {
    CreateRoomUnknown = 0;
    CreateRoomSystem = 1;
    CreateRoomPlayer = 2;
    CreateRoomGS = 3;
}

//房间状态
enum RoomState
{
    RoomStateNil = 0;
    RoomStateOpen = 1;
    RoomStateClosed = 2;
}

// 房间信息
message RoomInfo
{
    uint64 roomID = 1 [jstype=JS_STRING];
    string roomName = 2;
    uint32 maxPlayer = 3;
    int32 mode = 4;
    int32 canWatch = 5;
    int32 visibility = 6;
    bytes roomProperty = 7;
    uint32 owner = 8;
    RoomState state = 9;
}

/*
GS主动创建房间:
CreateRoom(svcName, podName, gameID, roomInfo, ttl) -> (status, roomID)
*/
message CreateRoom {
    string svcName = 1;
    string podName = 2;
    uint32 gameID = 3;
    RoomInfo room_info = 4;
    uint32 ttl = 5; // 空房间ttl
}

message CreateRoomAck
{
    uint32 status = 1;
    uint64 roomID = 2 [jstype=JS_STRING];
}

/*
GS重置房间TTL:
TouchRoom(gameID, roomID, ttl) -> (status)
*/
message TouchRoom {
    string svcName = 1;
    string podName = 2;
    uint32 gameID = 3;
    uint64 roomID = 4 [jstype=JS_STRING];
    uint32 ttl = 5; // 空房间ttl
}

message TouchRoomAck
{
    uint32 status = 1;
}

/*
GS主动销毁房间:
DestroyRoom(svcName, podName, gameID, roomID) -> (status)
*/
message DestroyRoom {
    string svcName = 1;
    string podName = 2;
    uint32 gameID = 3;
    uint64 roomID = 4 [jstype=JS_STRING];
}

message DestroyRoomAck
{
    uint32 status = 1;
}
